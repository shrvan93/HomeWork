import numpy as np
import matplotlib.pyplot as plt

# Simulation parameters
grid_size = 100
dx = 0.5
dt = 0.01
duration = 10.0


# Initialize variables
u = np.zeros((grid_size, grid_size))  # x-component of velocity
v = np.zeros((grid_size, grid_size))  # y-component of velocity
h = np.zeros((grid_size, grid_size))  # Height of the water column

# Initial conditions (setting up a simple disturbance)
h[40:60, 40:60] = 1.0

# Simulation loop
for t in np.arange(0, duration, dt):
    # Compute gradients
    du_dx, du_dy = np.gradient(u, dx)
    dv_dx, dv_dy = np.gradient(v, dx)
    dh_dx, dh_dy = np.gradient(h, dx)

    # Update velocity and height using the shallow-water equations
    u -= dt * 9.81 * dh_dx
    v -= dt * 9.81 * dh_dy

    # Avoid division by zero or small values
    denom = dh_dx + dh_dy
    denom[abs(denom) < 1e-6] = 1e-6  # Replace small values with a small constant

    h -= dt * (u * du_dx + v * dv_dy) / denom



# Visualize the final state
plt.imshow(h, cmap='Blues', extent=(0, grid_size, 0, grid_size))
plt.colorbar(label='Water Height')
plt.title('Weather Pattern Simulation')
plt.xlabel('X-axis')
plt.ylabel('Y-axis')
plt.show()
